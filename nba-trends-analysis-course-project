# This is another course project I did. It sums up all the skills I learned to summarise the relationship between two variables. 

import numpy as np
import pandas as pd
from scipy.stats import pearsonr, chi2_contingency
import matplotlib.pyplot as plt
import seaborn as sns

import codecademylib3
np.set_printoptions(suppress=True, precision = 2)

nba = pd.read_csv('./nba_games.csv')

# Subset Data to 2010 Season, 2014 Season
nba_2010 = nba[nba.year_id == 2010]
nba_2014 = nba[nba.year_id == 2014]

print(nba_2010.head())
print(nba_2014.head())

# Create two series
knicks_pts = nba_2010.pts[nba.fran_id=='Knicks']
nets_pts = nba_2010.pts[nba.fran_id=='Nets']

# Calculate average
kavg= np.mean(knicks_pts)
navg= np.mean(nets_pts)
diff_means_2010=kavg-navg
print(kavg)
print(navg)
print(diff_means_2010)

# Create histogram
plt.hist(knicks_pts, alpha=0.8, normed = True, label='knicks')
plt.hist(nets_pts, alpha=0.8, normed = True, label='nets')
plt.legend()
plt.show()

plt.clf() 

knicks_pts_2014 = nba_2014.pts[nba.fran_id=='Knicks']
nets_pts_2014 = nba_2014.pts[nba.fran_id=='Nets']

kavg2014= np.mean(knicks_pts_2014)
navg2014= np.mean(nets_pts_2014)

print('look here')
print(kavg2014)
print(navg2014)

plt.hist(knicks_pts_2014, alpha=0.8, normed = True, label='knicks')
plt.hist(nets_pts_2014, alpha=0.8, normed = True, label='nets')
plt.legend()
plt.show()

# Generate side-by-side boxplots to investigate the relationship between franchise and points scored per game

plt.clf() 
sns.boxplot(data = nba_2010, x = 'pts', y = 'fran_id')
plt.show()

# Create a contingency table to decide if game_result and game_location are related
location_result_freq = pd.crosstab(nba_2010.game_result, nba_2010.game_location)
print(location_result_freq)

# Calculate the expected contingency table and chi suqare
chi2, pval, dof, expected = chi2_contingency(location_result_freq)
print(expected)
print(chi2)

# calculate covariance between forcast and point_diff
cov = np.cov(nba_2010.forecast, nba_2010.point_diff)
print(cov)

# calculate correlation between forcast and point_diff
corr_f_pd = pearsonr(nba.forecast, nba.point_diff)
print(corr_f_pd)  

# Generate a scatter plot

plt.clf() 
plt.scatter(x = nba.forecast, y = nba.point_diff)
plt.xlabel('forecast')
plt.ylabel('point diff')
plt.show()

